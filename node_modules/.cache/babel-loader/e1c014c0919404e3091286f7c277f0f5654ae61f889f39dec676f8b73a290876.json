{"ast":null,"code":"var _jsxFileName = \"/Users/leedonggun/Downloads/CloneBuilder 10/URP/client/src/Component/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css';\nimport { ChatBubble } from './chatbubble';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Chat = props => {\n  _s();\n  const [chatlog, setChatlog] = useState(props.chatData);\n  const [feedback, setFeedback] = useState(\"\");\n  const [triggerResponse, setTriggerResponse] = useState(false);\n  const chatEndRef = useRef(null);\n  const {\n    className\n  } = props;\n  const handleFeedbackChange = event => {\n    setFeedback(event.target.value);\n  };\n  const giveFeedback = () => {\n    if (feedback !== \"\") {\n      setChatlog([...chatlog, {\n        \"speaker\": \"instructor\",\n        \"content\": feedback\n      }]);\n      setTriggerResponse(true);\n    }\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      giveFeedback();\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      if (triggerResponse) {\n        await props.getResponse(feedback);\n        setTriggerResponse(false); // Reset trigger\n        setFeedback(\"\");\n      }\n    }\n    fetchData();\n  }, [triggerResponse]);\n  useEffect(() => {\n    setChatlog(props.chatData);\n  }, [props.chatData]);\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [chatlog]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chatUI`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatWindow\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chatContainer ${className}`,\n          children: [chatlog.map((chat, index) => /*#__PURE__*/_jsxDEV(ChatBubble, {\n            logId: chat.logId // logId가 올바르게 설정되어 있는지 확인\n            ,\n            speaker: chat.speaker,\n            cloneName: props.cloneName,\n            content: chat.content,\n            image: props.profileImageUrl,\n            updateLog: props.updateLog\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: chatEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), props.names, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottombar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: feedback,\n          onChange: handleFeedbackChange,\n          onKeyPress: handleKeyPress,\n          placeholder: \"\\uD074\\uB860\\uACFC \\uB300\\uD654\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"chatBtn\",\n          onClick: giveFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Chat, \"G1qU0I84AHPPsD1pIiJkoNqp3qU=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatBubble","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","props","_s","chatlog","setChatlog","chatData","feedback","setFeedback","triggerResponse","setTriggerResponse","chatEndRef","className","handleFeedbackChange","event","target","value","giveFeedback","handleKeyPress","key","fetchData","getResponse","current","scrollIntoView","behavior","children","map","chat","index","logId","speaker","cloneName","content","image","profileImageUrl","updateLog","fileName","_jsxFileName","lineNumber","columnNumber","ref","names","onChange","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/leedonggun/Downloads/CloneBuilder 10/URP/client/src/Component/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css';\nimport { ChatBubble } from './chatbubble';\n\nexport const Chat = (props) => {\n    const [chatlog, setChatlog] = useState(props.chatData);\n    const [feedback, setFeedback] = useState(\"\");\n    const [triggerResponse, setTriggerResponse] = useState(false);\n    const chatEndRef = useRef(null);\n    const { className } = props;\n\n    const handleFeedbackChange = (event) => {\n        setFeedback(event.target.value);\n    };\n\n    const giveFeedback = () => {\n        if(feedback !== \"\") {\n            setChatlog([...chatlog, {\"speaker\":\"instructor\", \"content\": feedback}]);\n            setTriggerResponse(true);\n        }\n\n\n\n    }\n\n    const handleKeyPress = (event) => {\n        if (event.key === 'Enter') { \n            giveFeedback();\n        }\n    }\n\n    \n\n    useEffect(() => {\n        async function fetchData() {\n            if (triggerResponse) {\n                await props.getResponse(feedback);\n                setTriggerResponse(false); // Reset trigger\n                setFeedback(\"\");\n            }\n        }\n        fetchData();\n    }, [triggerResponse]);\n\n    useEffect(() => {\n        setChatlog(props.chatData);\n    }, [props.chatData]);\n\n\n    useEffect(() => {\n        if (chatEndRef.current) {\n            chatEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n    }, [chatlog]);\n\n\n    return (\n        <>\n            <div className={`chatUI`}>\n                <div className='chatWindow'>\n                    <div className={`chatContainer ${className}`}>\n                        {chatlog.map((chat, index) => (\n                            <ChatBubble\n                                key={index}\n                                logId={chat.logId}  // logId가 올바르게 설정되어 있는지 확인\n                                speaker={chat.speaker}\n                                cloneName={props.cloneName} \n                                content={chat.content}\n                                image={props.profileImageUrl}\n                                updateLog={props.updateLog}\n                            />\n                        ))}\n                        <div ref={chatEndRef} />\n                    </div>\n                </div>\n                {props.names}\n                <div className='bottombar'>\n                    <input value={feedback} onChange={handleFeedbackChange} onKeyPress={handleKeyPress}  placeholder='클론과 대화하기' />\n                    <button className='chatBtn' onClick={giveFeedback} />\n                </div>\n            </div>\n        </>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}